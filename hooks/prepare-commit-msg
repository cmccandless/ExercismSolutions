#!/usr/bin/env python

import sys
import hook_utils as hut


def main(commit_file, type=None, sha1_hash=None):
    changes, ret = hut.exec('git', 'diff', '--cached', '--name-status')
    changes = changes.split('\n')
    if ret != 0:
        hut.abort('error {} occurred'.format(ret), label='git-diff')
    new_solution_tracks = set()
    revised_tracks = set()
    for change in changes:
        if change == '':
            continue
        change_type, *fileparts = change.split()
        filename = ' '.join(fileparts).strip()
        if change_type == 'D' or '/' not in filename:
            continue
        track, exercise, *_ = filename.split('/')
        if change_type == 'A':
            new_solution_tracks.add(track)
        elif change_type == 'M':
            revised_tracks.add(track)

    with open(commit_file, 'r') as f:
        commit_msg = f.read()

    if commit_msg == '' or commit_msg.strip().startswith('#'):
        commit_msg_parts = []
        msg = 'new {} for {} exercises'
        if new_solution_tracks:
            tracks = ', '.join(new_solution_tracks.difference(['hooks']))
            commit_msg_parts.append(msg.format('solutions', tracks))
        if revised_tracks:
            tracks = ', '.join(revised_tracks.difference(['hooks']))
            commit_msg_parts.append(msg.format('revisions', tracks))
        if 'hooks' in new_solution_tracks:
            commit_msg_parts.append('new hooks')
        if 'hooks' in revised_tracks:
            commit_msg_parts.append('new revisions for existing hooks')
        commit_msg = '\n'.join(commit_msg_parts) + '\n' + commit_msg

    with open(commit_file, 'w') as f:
        f.write(commit_msg)


if __name__ == '__main__':
    main(*sys.argv[1:])
